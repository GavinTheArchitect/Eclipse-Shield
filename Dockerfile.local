# Multi-stage Docker build for secure local deployment
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies
COPY requirements-secure.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-secure.txt

# Production stage
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_ENV=development
ENV FLASK_APP=wsgi:application

# Create non-root user for security
RUN groupadd -r eclipse && useradd -r -g eclipse eclipse

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set work directory
WORKDIR /app

# Copy application code
COPY --chown=eclipse:eclipse . .

# Create necessary directories and set permissions
RUN mkdir -p logs extension && \
    chown -R eclipse:eclipse /app && \
    chmod 755 /app

# Remove unnecessary files for security
RUN rm -f .env.example deploy.sh nginx.conf docker-compose.yml

# Switch to non-root user
USER eclipse

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start command optimized for local development
CMD ["python", "secure_app.py"]
